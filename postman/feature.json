{
	"info": {
		"_postman_id": "dfca1e41-8fa2-4f88-901d-428132e16619",
		"name": "Feature location processing",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "26683181"
	},
	"item": [
		{
			"name": "Location",
			"item": [
				{
					"name": "Validation",
					"item": [
						{
							"name": "Required params in body",
							"item": [
								{
									"name": "Добавление локации с пустым телом",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Ответ должен содержать код статуса 400 и данные в формате json\", function () {",
													"    pm.response.to.be.badRequest;    ",
													"    pm.response.to.be.withBody;",
													"    pm.response.to.be.json;",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const main = async () => {",
													"    const api = new API(pm);",
													"    const rnd = new RandomUtils();",
													"",
													"    let location;",
													"    try {",
													"        location = {};",
													"    } catch(err) {",
													"        console.error(\"Ошибка при подготовке тестовых данных.\", err);",
													"    }",
													"",
													"    pm.request.body.update({",
													"        mode: 'raw',",
													"        raw: JSON.stringify(location),",
													"        options: { raw: { language: 'json' } }",
													"    });",
													"};",
													"",
													"const interval = setInterval(() => {}, 1000);",
													"",
													"setTimeout(async () => ",
													"    {",
													"        try {",
													"            await main();",
													"        } catch (e) {",
													"            console.error(e);",
													"        } finally {",
													"            clearInterval(interval);",
													"        }",
													"    },  ",
													"    100 ",
													");"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Accept",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/admin/locations/",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"admin",
												"locations",
												""
											]
										}
									},
									"response": []
								},
								{
									"name": "Добавление локации без имени",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Ответ должен содержать код статуса 400 и данные в формате json\", function () {",
													"    pm.response.to.be.badRequest;    ",
													"    pm.response.to.be.withBody;",
													"    pm.response.to.be.json;",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"main = async () => {",
													"    const api = new API(pm);",
													"    const rnd = new RandomUtils();",
													"",
													"    let location;",
													"    try {",
													"        location = rnd.getLocation();",
													"        delete location[\"name\"];",
													"    } catch(err) {",
													"        console.error(\"Ошибка при подготовке тестовых данных.\", err);",
													"    }",
													"",
													"    pm.request.body.update({",
													"        mode: 'raw',",
													"        raw: JSON.stringify(location),",
													"        options: { raw: { language: 'json' } }",
													"    });",
													"};",
													"",
													"const interval = setInterval(() => {}, 1000);",
													"",
													"setTimeout(async () => ",
													"    {",
													"        try {",
													"            await main();",
													"        } catch (e) {",
													"            console.error(e);",
													"        } finally {",
													"            clearInterval(interval);",
													"        }",
													"    },  ",
													"    100 ",
													");"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Accept",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/admin/locations/",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"admin",
												"locations",
												""
											]
										}
									},
									"response": []
								},
								{
									"name": "Добавление локации без радиуса",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Ответ должен содержать код статуса 400 и данные в формате json\", function () {",
													"    pm.response.to.be.badRequest;    ",
													"    pm.response.to.be.withBody;",
													"    pm.response.to.be.json;",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"main = async () => {",
													"    const api = new API(pm);",
													"    const rnd = new RandomUtils();",
													"",
													"    let location;",
													"    try {",
													"        location = rnd.getLocation();",
													"        delete location[\"radius\"];",
													"    } catch(err) {",
													"        console.error(\"Ошибка при подготовке тестовых данных.\", err);",
													"    }",
													"",
													"    pm.request.body.update({",
													"        mode: 'raw',",
													"        raw: JSON.stringify(location),",
													"        options: { raw: { language: 'json' } }",
													"    });",
													"};",
													"",
													"const interval = setInterval(() => {}, 1000);",
													"",
													"setTimeout(async () => ",
													"    {",
													"        try {",
													"            await main();",
													"        } catch (e) {",
													"            console.error(e);",
													"        } finally {",
													"            clearInterval(interval);",
													"        }",
													"    },  ",
													"    100 ",
													");"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Accept",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/admin/locations/",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"admin",
												"locations",
												""
											]
										}
									},
									"response": []
								},
								{
									"name": "Добавление локации без location",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Ответ должен содержать код статуса 400 и данные в формате json\", function () {",
													"    pm.response.to.be.badRequest;    ",
													"    pm.response.to.be.withBody;",
													"    pm.response.to.be.json;",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"main = async () => {",
													"    const api = new API(pm);",
													"    const rnd = new RandomUtils();",
													"",
													"    let location;",
													"    try {",
													"        location = rnd.getLocation();",
													"        delete location[\"location\"];",
													"    } catch(err) {",
													"        console.error(\"Ошибка при подготовке тестовых данных.\", err);",
													"    }",
													"",
													"    pm.request.body.update({",
													"        mode: 'raw',",
													"        raw: JSON.stringify(location),",
													"        options: { raw: { language: 'json' } }",
													"    });",
													"};",
													"",
													"const interval = setInterval(() => {}, 1000);",
													"",
													"setTimeout(async () => ",
													"    {",
													"        try {",
													"            await main();",
													"        } catch (e) {",
													"            console.error(e);",
													"        } finally {",
													"            clearInterval(interval);",
													"        }",
													"    },  ",
													"    100 ",
													");"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Accept",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/admin/locations/",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"admin",
												"locations",
												""
											]
										}
									},
									"response": []
								},
								{
									"name": "Добавление локации с неправильной location",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Ответ должен содержать код статуса 400 и данные в формате json\", function () {",
													"    pm.response.to.be.badRequest;    ",
													"    pm.response.to.be.withBody;",
													"    pm.response.to.be.json;",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"main = async () => {",
													"    const api = new API(pm);",
													"    const rnd = new RandomUtils();",
													"",
													"    let location;",
													"    try {",
													"        location = rnd.getLocation();",
													"        delete location[\"location\"][\"lat\"];",
													"    } catch(err) {",
													"        console.error(\"Ошибка при подготовке тестовых данных.\", err);",
													"    }",
													"",
													"    pm.request.body.update({",
													"        mode: 'raw',",
													"        raw: JSON.stringify(location),",
													"        options: { raw: { language: 'json' } }",
													"    });",
													"};",
													"",
													"const interval = setInterval(() => {}, 1000);",
													"",
													"setTimeout(async () => ",
													"    {",
													"        try {",
													"            await main();",
													"        } catch (e) {",
													"            console.error(e);",
													"        } finally {",
													"            clearInterval(interval);",
													"        }",
													"    },  ",
													"    100 ",
													");"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Accept",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/admin/locations/",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"admin",
												"locations",
												""
											]
										}
									},
									"response": []
								}
							]
						}
					]
				},
				{
					"name": "Добавление новой локации",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const main = async () => {",
									"    const api = new API(pm);",
									"    const rnd = new RandomUtils();",
									"",
									"    let location;",
									"    try {",
									"        location = rnd.getLocation();",
									"    } catch(err) {",
									"        console.error(\"Ошибка при подготовке тестовых данных.\", err);",
									"    }",
									"",
									"    pm.request.body.update({",
									"        mode: 'raw',",
									"        raw: JSON.stringify(location),",
									"        options: { raw: { language: 'json' } }",
									"    });",
									"};",
									"",
									"const interval = setInterval(() => {}, 1000);",
									"",
									"setTimeout(async () => ",
									"    {",
									"        try {",
									"            await main();",
									"        } catch (e) {",
									"            console.error(e);",
									"        } finally {",
									"            clearInterval(interval);",
									"        }",
									"    },  ",
									"    100 ",
									");"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 201 и данные в формате json\", function () {",
									"    pm.response.to.have.status(201);",
									"    pm.response.to.be.withBody;",
									"    pm.response.to.be.json;",
									"});",
									"",
									"const source = JSON.parse(pm.request.body.raw);",
									"const target = pm.response.json();",
									"",
									"pm.test(\"Локация должна содержать поля: id, name, location, radius\", function () {",
									"pm.expect(target).to.have.property('id');",
									"pm.expect(target).to.have.property('name');",
									"pm.expect(target).to.have.property('location');",
									"pm.expect(target).to.have.property('radius');",
									"});",
									"",
									"pm.test(\"Данные в ответе должны соответствовать данным в запросе\", function () {",
									"    pm.expect(target.id).to.not.be.null;",
									"    pm.expect(source.name).equal(target.name, 'Название локации должно соответствовать отправленному в запросе');",
									"    pm.expect(target.location.lat.toString()).equal(source.location.lat.toString(), 'Широта локации должна соответствовать широте локации в запросе');",
									"    pm.expect(target.location.lon.toString()).equal(source.location.lon.toString(), 'Долгота локации  должна соответствовать долготе локации в запросе');",
									"    pm.expect(target.radius.toString()).equal(target.radius.toString(), 'Радиус области должен соответствовать радиусу в запросе');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{{request_body}}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/admin/locations/",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"admin",
								"locations",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Изменение локации",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const main = async () => {",
									"    const api = new API(pm);",
									"    const rnd = new RandomUtils();",
									"",
									"    try {",
									"        const location = await api.addLocation(rnd.getLocation(), true);",
									"        pm.collectionVariables.set(\"lid\", location.id);",
									"        pm.collectionVariables.set(\"response\", location)",
									"        pm.request.body.update({",
									"            mode: 'raw',",
									"            raw: JSON.stringify({",
									"                name: \"Updated\",",
									"                location: {",
									"                    lat: 0,",
									"                    lon: 0",
									"                },",
									"                radius: 10",
									"            }),",
									"            options: { raw: { language: 'json' } }",
									"        });",
									"    } catch(err) {",
									"        console.error(\"Ошибка при подготовке тестовых данных.\", err);",
									"    }",
									"};",
									"",
									"const interval = setInterval(() => {}, 1000);",
									"",
									"setTimeout(async () => ",
									"    {",
									"        try {",
									"            await main();",
									"        } catch (e) {",
									"            console.error(e);",
									"        } finally {",
									"            clearInterval(interval);",
									"        }",
									"    },  ",
									"    100 ",
									");"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function () {",
									"    pm.response.to.have.status(200);",
									"    pm.response.to.be.withBody;",
									"    pm.response.to.be.json;",
									"});",
									"",
									"const source = JSON.parse(pm.request.body.raw);",
									"const target = pm.response.json();",
									"",
									"pm.test(\"Локация должна содержать поля: id, name, location, radius\", function () {",
									"pm.expect(target).to.have.property('id');",
									"pm.expect(target).to.have.property('name');",
									"pm.expect(target).to.have.property('location');",
									"pm.expect(target).to.have.property('radius');",
									"});",
									"",
									"pm.test(\"Данные в ответе должны соответствовать данным в запросе\", function () {",
									"    pm.expect(target.id).to.not.be.null;",
									"    pm.expect(source.name).equal(target.name, 'Название локации должно соответствовать отправленному в запросе');",
									"    pm.expect(target.location.lat.toString()).equal(source.location.lat.toString(), 'Широта локации должна соответствовать широте локации в запросе');",
									"    pm.expect(target.location.lon.toString()).equal(source.location.lon.toString(), 'Долгота локации  должна соответствовать долготе локации в запросе');",
									"    pm.expect(target.radius.toString()).equal(target.radius.toString(), 'Радиус области должен соответствовать радиусу в запросе');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/admin/locations/:locationId",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"admin",
								"locations",
								":locationId"
							],
							"variable": [
								{
									"key": "locationId",
									"value": "{{lid}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Удаление area (удаление связанной location)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const main = async () => {",
									"    const api = new API(pm);",
									"    const rnd = new RandomUtils();",
									"",
									"    try {",
									"        const location = await api.addLocation(rnd.getLocation(), true);",
									"        const findedLocation = await api.findLocation(location.id, true);",
									"        pm.collectionVariables.set(\"lid\", location.id)",
									"        pm.collectionVariables.set(\"response\", findedLocation)",
									"    } catch(err) {",
									"        console.error(\"Ошибка при подготовке тестовых данных.\", err);",
									"    }",
									"};",
									"",
									"const interval = setInterval(() => {}, 1000);",
									"",
									"setTimeout(async () => ",
									"    {",
									"        try {",
									"            await main();",
									"        } catch (e) {",
									"            console.error(e);",
									"        } finally {",
									"            clearInterval(interval);",
									"        }",
									"    },  ",
									"    100 ",
									");"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 204\", function () {",
									"    pm.response.to.have.status(204);",
									"});",
									"",
									"source = pm.collectionVariables.get('response');",
									"lid = pm.collectionVariables.get('lid');",
									"",
									"pm.test(\"Локация должна быть найдена до удаления\", function () {",
									"    pm.expect(source.id).equal(lid, 'Идентификтор локации должен совпадать с удаляемым');",
									"});",
									"",
									"pm.sendRequest({",
									"            url: pm.collectionVariables.get(\"baseUrl\") + \"/locations/\" + lid,",
									"            method: 'GET',",
									"        }, (error, response) => {",
									"            pm.test(\"Локация не должна быть найдена после удаления\", function () {",
									"                pm.expect(response.code).to.eql(404);",
									"            });",
									"        });"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/admin/locations/:locationId",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"admin",
								"locations",
								":locationId"
							],
							"variable": [
								{
									"key": "locationId",
									"value": "{{lid}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Получение локаций",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const main = async () => {",
									"    const api = new API(pm);",
									"    const rnd = new RandomUtils();",
									"",
									"    const location = await api.addLocation(rnd.getLocation(), true);",
									"    pm.collectionVariables.set(\"lid\", location.id);",
									"    pm.collectionVariables.set(\"response\", location)",
									"    try {",
									"",
									"    } catch(err) {",
									"        console.error(\"Ошибка при подготовке тестовых данных.\", err);",
									"    }",
									"",
									"    pm.request.body.update({",
									"        mode: 'raw',",
									"        raw: JSON.stringify(location),",
									"        options: { raw: { language: 'json' } }",
									"    });",
									"};",
									"",
									"const interval = setInterval(() => {}, 1000);",
									"",
									"setTimeout(async () => ",
									"    {",
									"        try {",
									"            await main();",
									"        } catch (e) {",
									"            console.error(e);",
									"        } finally {",
									"            clearInterval(interval);",
									"        }",
									"    },  ",
									"    100 ",
									");"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function () {",
									"    pm.response.to.have.status(200);",
									"    pm.response.to.be.withBody;",
									"    pm.response.to.be.json;",
									"});",
									"",
									"const source = pm.collectionVariables.get('response');",
									"const target = pm.response.json();",
									"let founded;",
									"target.forEach(function(element){if (element.id == source.id) founded = element});",
									"",
									"pm.test(\"Локация должна содержать поля: id, name, location, radius\", function () {",
									"pm.expect(target[0]).to.have.property('id');",
									"pm.expect(target[0]).to.have.property('name');",
									"pm.expect(target[0]).to.have.property('location');",
									"pm.expect(target[0]).to.have.property('radius');",
									"});",
									"",
									"",
									"pm.test(\"Данные в ответе должны соответствовать данным в запросе\", function () {",
									"    pm.expect(founded.id).to.not.be.null;",
									"    pm.expect(founded.name).equal(source.name, 'Название локации должно соответствовать отправленному в запросе');",
									"    pm.expect(founded.location.lat.toString()).equal(source.location.lat.toString(), 'Широта локации должна соответствовать широте локации в запросе');",
									"    pm.expect(founded.location.lon.toString()).equal(source.location.lon.toString(), 'Долгота локации  должна соответствовать долготе локации в запросе');",
									"    pm.expect(founded.radius.toString()).equal(source.radius.toString(), 'Радиус области должен соответствовать радиусу в запросе');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/locations",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"locations"
							]
						}
					},
					"response": []
				},
				{
					"name": "Получение локаций по id",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const main = async () => {",
									"    const api = new API(pm);",
									"    const rnd = new RandomUtils();",
									"",
									"    const location = await api.addLocation(rnd.getLocation(), true);",
									"    pm.collectionVariables.set(\"lid\", location.id);",
									"    pm.collectionVariables.set(\"response\", location)",
									"    try {",
									"",
									"    } catch(err) {",
									"        console.error(\"Ошибка при подготовке тестовых данных.\", err);",
									"    }",
									"",
									"    pm.request.body.update({",
									"        mode: 'raw',",
									"        raw: JSON.stringify(location),",
									"        options: { raw: { language: 'json' } }",
									"    });",
									"};",
									"",
									"const interval = setInterval(() => {}, 1000);",
									"",
									"setTimeout(async () => ",
									"    {",
									"        try {",
									"            await main();",
									"        } catch (e) {",
									"            console.error(e);",
									"        } finally {",
									"            clearInterval(interval);",
									"        }",
									"    },  ",
									"    100 ",
									");"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function () {",
									"    pm.response.to.have.status(200);",
									"    pm.response.to.be.withBody;",
									"    pm.response.to.be.json;",
									"});",
									"",
									"const source = pm.collectionVariables.get('response');",
									"const founded = pm.response.json();",
									"",
									"",
									"pm.test(\"Локация должна содержать поля: id, name, location, radius\", function () {",
									"pm.expect(founded).to.have.property('id');",
									"pm.expect(founded).to.have.property('name');",
									"pm.expect(founded).to.have.property('location');",
									"pm.expect(founded).to.have.property('radius');",
									"});",
									"",
									"",
									"pm.test(\"Данные в ответе должны соответствовать данным в запросе\", function () {",
									"    pm.expect(founded.id).to.not.be.null;",
									"    pm.expect(founded.name).equal(source.name, 'Название локации должно соответствовать отправленному в запросе');",
									"    pm.expect(founded.location.lat.toString()).equal(source.location.lat.toString(), 'Широта локации должна соответствовать широте локации в запросе');",
									"    pm.expect(founded.location.lon.toString()).equal(source.location.lon.toString(), 'Долгота локации  должна соответствовать долготе локации в запросе');",
									"    pm.expect(founded.radius.toString()).equal(source.radius.toString(), 'Радиус области должен соответствовать радиусу в запросе');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/locations/:locationId",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"locations",
								":locationId"
							],
							"variable": [
								{
									"key": "locationId",
									"value": "{{lid}}"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Event",
			"item": [
				{
					"name": "Получение событий с фильтром по lat,lon,radius",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const main = async () => {",
									"    const api = new API(pm);",
									"    const rnd = new RandomUtils();",
									"",
									"    try {",
									"        const mosLat = 55.755833;",
									"        const mosLon = 37.617778;",
									"        const latDelta = 0.0167;",
									"        const user = await api.addUser(rnd.getUser());",
									"        const category = await api.addCategory(rnd.getCategory());",
									"        let randomEvent1 = rnd.getEvent(category.id);",
									"        randomEvent1.location.lat = mosLat + (latDelta/2); ",
									"        randomEvent1.location.lon = mosLon;",
									"        let randomEvent2 = rnd.getEvent(category.id);",
									"        randomEvent2.location.lat = mosLat + (latDelta*2);",
									"        randomEvent2.location.lon = mosLon;",
									"        let event1 = await api.addEvent(user.id, randomEvent1);",
									"        let event2 = await api.addEvent(user.id, randomEvent2);",
									"        event1 = await api.publishEvent(event1.id);",
									"        event2 = await api.publishEvent(event2.id);",
									"        pm.request.removeQueryParams(['lat', 'lon', 'radius']);",
									"        pm.request.addQueryParams([`lat=` + mosLat, 'lon=' + mosLon, 'radius=' + 1]);",
									"        pm.collectionVariables.set('response1', event1);",
									"        pm.collectionVariables.set('response2', event2);",
									"    } catch(err) {",
									"        console.error(\"Ошибка при подготовке тестовых данных.\", err);",
									"    }",
									"};",
									"",
									"const interval = setInterval(() => {}, 1000);",
									"",
									"setTimeout(async () => ",
									"    {",
									"        try {",
									"            // выполняем наш скрипт",
									"            await main();",
									"        } catch (e) {",
									"            console.error(e);",
									"        } finally {",
									"            clearInterval(interval);",
									"        }",
									"    },  ",
									"    100 ",
									");"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"const utils = new Utils();",
									"",
									"pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function () {",
									"    pm.response.to.have.status(200);",
									"    pm.response.to.be.withBody;",
									"    pm.response.to.be.json;",
									"});",
									"",
									"const source1 = pm.collectionVariables.get('response1');",
									"const source2 = pm.collectionVariables.get('response2');",
									"const target = pm.response.json();",
									"console.log(\"source1.id \" + source1.id);",
									"event1 = utils.findObjectById(target, source1.id);",
									"console.log(event1);",
									"console.log(\"source2.id \" + source2.id);",
									"event2 = utils.findObjectById(target, source2.id);",
									"",
									"pm.test(\"Событие должно содержать поля: id\", function () {",
									"    pm.expect(event1).to.have.property('id');",
									"    pm.expect(event1.name).to.equal(source1.name, \"Должно попадать первое событие из двух добавленных\");",
									"    pm.expect(event2, \"Второе событие не должно попасть в выборку\").to.be.undefined; ",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/events?lat={{lat}}&lon={{lon}}&radius={{radius}}&size=1000",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"events"
							],
							"query": [
								{
									"key": "lat",
									"value": "{{lat}}"
								},
								{
									"key": "lon",
									"value": "{{lon}}"
								},
								{
									"key": "radius",
									"value": "{{radius}}"
								},
								{
									"key": "size",
									"value": "1000"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Получение событий с фильтром по lat,lon,radius с большим радиусом",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const main = async () => {",
									"    const api = new API(pm);",
									"    const rnd = new RandomUtils();",
									"",
									"    try {",
									"        const mosLat = 55.755833;",
									"        const mosLon = 37.617778;",
									"        const latDelta = 0.0167;",
									"        const user = await api.addUser(rnd.getUser());",
									"        const category = await api.addCategory(rnd.getCategory());",
									"        let randomEvent1 = rnd.getEvent(category.id);",
									"        randomEvent1.location.lat = mosLat + (latDelta/2); ",
									"        randomEvent1.location.lon = mosLon;",
									"        let randomEvent2 = rnd.getEvent(category.id);",
									"        randomEvent2.location.lat = mosLat + (latDelta*2);",
									"        randomEvent2.location.lon = mosLon;",
									"        let event1 = await api.addEvent(user.id, randomEvent1);",
									"        let event2 = await api.addEvent(user.id, randomEvent2);",
									"        event1 = await api.publishEvent(event1.id);",
									"        event2 = await api.publishEvent(event2.id);",
									"        pm.request.removeQueryParams(['lat', 'lon', 'radius']);",
									"        pm.request.addQueryParams([`lat=` + mosLat, 'lon=' + mosLon, 'radius=' + 5.0]);",
									"        pm.collectionVariables.set('response1', event1);",
									"        pm.collectionVariables.set('response2', event2);",
									"    } catch(err) {",
									"        console.error(\"Ошибка при подготовке тестовых данных.\", err);",
									"    }",
									"};",
									"",
									"const interval = setInterval(() => {}, 1000);",
									"",
									"setTimeout(async () => ",
									"    {",
									"        try {",
									"            // выполняем наш скрипт",
									"            await main();",
									"        } catch (e) {",
									"            console.error(e);",
									"        } finally {",
									"            clearInterval(interval);",
									"        }",
									"    },  ",
									"    100 ",
									");"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"const utils = new Utils();",
									"",
									"pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function () {",
									"    pm.response.to.have.status(200);",
									"    pm.response.to.be.withBody;",
									"    pm.response.to.be.json;",
									"});",
									"",
									"const source1 = pm.collectionVariables.get('response1');",
									"const source2 = pm.collectionVariables.get('response2');",
									"const target = pm.response.json();",
									"",
									"event1 = utils.findObjectById(target, source1.id);",
									"event2 = utils.findObjectById(target, source2.id);",
									"",
									"pm.test(\"Событие должно содержать поля: id,\", function () {",
									"    pm.expect(event1).to.have.property('id');",
									"    pm.expect(event1.name).to.equal(source1.name, \"Должно попадать первое событие из двух добавленных\");",
									"    pm.expect(event2).to.have.property('id');",
									"    pm.expect(event2.name).to.equal(source2.name, \"Должно попадать второе событие из двух добавленных\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{baseUrl}}/events?lat={{lat}}&lon={{lon}}&radius={{radius}}&size=1000",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"events"
							],
							"query": [
								{
									"key": "lat",
									"value": "{{lat}}"
								},
								{
									"key": "lon",
									"value": "{{lon}}"
								},
								{
									"key": "radius",
									"value": "{{radius}}"
								},
								{
									"key": "size",
									"value": "1000"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Получение событий с фильтром по locationId",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const main = async () => {",
									"    const api = new API(pm);",
									"    const rnd = new RandomUtils();",
									"",
									"    try {",
									"        const mosLat = 55.755833;",
									"        const mosLon = 37.617778;",
									"        const latDelta = 0.0167;",
									"",
									"        let area = rnd.getLocation();",
									"        area.location.lat = mosLat;",
									"        area.location.lon = mosLon;",
									"        area.radius = 4.0;",
									"        const location = await api.addLocation(area, true);",
									"",
									"        const user = await api.addUser(rnd.getUser());",
									"        const category = await api.addCategory(rnd.getCategory());",
									"",
									"        let randomEvent1 = rnd.getEvent(category.id);",
									"        randomEvent1.location.lat = mosLat + (latDelta/2); ",
									"        randomEvent1.location.lon = mosLon;",
									"",
									"        let randomEvent2 = rnd.getEvent(category.id);",
									"        randomEvent2.location.lat = mosLat + (latDelta*2);",
									"        randomEvent2.location.lon = mosLon;",
									"",
									"        let event1 = await api.addEvent(user.id, randomEvent1);",
									"        let event2 = await api.addEvent(user.id, randomEvent2);",
									"",
									"        event1 = await api.publishEvent(event1.id);",
									"        event2 = await api.publishEvent(event2.id);",
									"",
									"        pm.request.removeQueryParams(['lat', 'lon', 'radius']);",
									"        pm.request.addQueryParams([`areaId=` + location.id]);",
									"",
									"        pm.collectionVariables.set('response1', event1);",
									"        pm.collectionVariables.set('response2', event2);",
									"    } catch(err) {",
									"        console.error(\"Ошибка при подготовке тестовых данных.\", err);",
									"    }",
									"};",
									"",
									"const interval = setInterval(() => {}, 1000);",
									"",
									"setTimeout(async () => ",
									"    {",
									"        try {",
									"            // выполняем наш скрипт",
									"            await main();",
									"        } catch (e) {",
									"            console.error(e);",
									"        } finally {",
									"            clearInterval(interval);",
									"        }",
									"    },  ",
									"    100 ",
									");"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"const utils = new Utils();",
									"",
									"pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function () {",
									"    pm.response.to.have.status(200);",
									"    pm.response.to.be.withBody;",
									"    pm.response.to.be.json;",
									"});",
									"",
									"const source1 = pm.collectionVariables.get('response1');",
									"const source2 = pm.collectionVariables.get('response2');",
									"const target = pm.response.json();",
									"",
									"event1 = utils.findObjectById(target, source1.id);",
									"event2 = utils.findObjectById(target, source2.id);",
									"",
									"pm.test(\"Событие должно содержать поля: id,\", function () {",
									"    pm.expect(event1).to.have.property('id');",
									"    pm.expect(event1.name).to.equal(source1.name, \"Должно попадать первое событие из двух добавленных\");",
									"    pm.expect(event2).to.have.property('id');",
									"    pm.expect(event2.name).to.equal(source2.name, \"Должно попадать второе событие из двух добавленных\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/events?lat={{lat}}&lon={{lon}}&radius={{radius}}&size=1000",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"events"
							],
							"query": [
								{
									"key": "lat",
									"value": "{{lat}}"
								},
								{
									"key": "lon",
									"value": "{{lon}}"
								},
								{
									"key": "radius",
									"value": "{{radius}}"
								},
								{
									"key": "size",
									"value": "1000"
								}
							]
						}
					},
					"response": []
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					"API = class {",
					"    constructor(postman, verbose = false, baseUrl = \"http://localhost:8080\") {",
					"        this.baseUrl = baseUrl;",
					"        this.pm = postman;",
					"        this._verbose = verbose;",
					"    }",
					"",
					"    async addUser(user, verbose=null) {",
					"        return this.post(\"/admin/users\", user, \"Ошибка при добавлении нового пользователя: \", verbose);",
					"    }",
					"",
					"    async addCategory(category, verbose=null) {",
					"        return this.post(\"/admin/categories\", category, \"Ошибка при добавлении новой категории: \", verbose);",
					"    }",
					"",
					"    async addEvent(userId, event, verbose=null) {",
					"        return this.post(\"/users/\" + userId + \"/events\", event, \"Ошибка при добавлении нового события: \", verbose);",
					"    }",
					"",
					"    async addCompilation(compilation, verbose=null) {",
					"        return this.post(\"/admin/compilations\", compilation, \"Ошибка при добавлении новой подборки: \", verbose);",
					"    }",
					"",
					"    async addLocation(location, verbose=null) {",
					"        return this.post(\"/admin/locations\", location, \"Ошибка при добавлении новой локации: \", verbose);",
					"    }",
					"",
					"    async publishParticipationRequest(eventId, userId, verbose=null) {",
					"        return this.post('/users/' + userId + '/requests?eventId=' + eventId, null, \"Ошибка при добавлении нового запроса на участие в событии\", verbose);",
					"    }",
					"",
					"    async publishEvent(eventId, verbose=null) {",
					"        return this.patch('/admin/events/' + eventId, {stateAction: \"PUBLISH_EVENT\"}, \"Ошибка при публикации события\", verbose);",
					"    }",
					"    ",
					"    async rejectEvent(eventId, verbose=null) {",
					"        return this.patch('/admin/events/' + eventId, {stateAction: \"REJECT_EVENT\"}, \"Ошибка при отмене события\", verbose);",
					"    }",
					"",
					"    async acceptParticipationRequest(eventId, userId, reqId, verbose=null) {",
					"        return this.patch('/users/' + userId + '/events/' + eventId + '/requests/', {requestIds:[reqId], status: \"CONFIRMED\"}, \"Ошибка при принятии заявки на участие в событии\", verbose);",
					"    }",
					"",
					"    async findCategory(catId, verbose=null) {",
					"        return this.get('/categories/' + catId, null, \"Ошибка при поиске категории по id\", verbose);",
					"    }",
					"",
					"    async findCompilation(compId, verbose=null) {",
					"        return this.get('/compilations/' + compId, null, \"Ошибка при поиске подборки по id\", verbose);",
					"    }",
					"",
					"    async findEvent(eventId, verbose=null) {",
					"        return this.get('/events/' + eventId, null, \"Ошибка при поиске события по id\", verbose);",
					"    }",
					"",
					"    async findUser(userId, verbose=null) {",
					"        return this.get('/admin/users?ids=' + userId, null, \"Ошибка при поиске пользователя по id\", verbose);",
					"    }",
					"",
					"    async findLocation(locationId, verbose=null) {",
					"        return this.get('/locations/' + locationId, null, \"Ошибка при поиске локации по id\", verbose);",
					"    }",
					"",
					"    async post(path, body, errorText = \"Ошибка при выполнении post-запроса: \", verbose=null) {",
					"        return this.sendRequest(\"POST\", path, body, errorText, verbose);",
					"    }",
					"",
					"    async patch(path, body = null, errorText = \"Ошибка при выполнении patch-запроса: \", verbose=null) {",
					"        return this.sendRequest(\"PATCH\", path, body, errorText, verbose);",
					"    }",
					"",
					"    async get(path, body = null, errorText = \"Ошибка при выполнении get-запроса: \", verbose=null) {",
					"        return this.sendRequest(\"GET\", path, body, errorText, verbose);",
					"    }",
					"",
					"    async sendRequest(method, path, body=null, errorText = \"Ошибка при выполнении запроса: \", verbose=null) {",
					"        return new Promise((resolve, reject) => {",
					"            verbose = verbose == null ? this._verbose : verbose;",
					"",
					"            const request = {",
					"                url: this.baseUrl + path,",
					"                method: method,",
					"                body: body == null ? \"\" : JSON.stringify(body),",
					"                header: { \"Content-Type\": \"application/json\" },",
					"            };",
					"",
					"            if(verbose) {",
					"                console.log(\"Отправляю запрос: \", request);",
					"            }",
					"",
					"            try {",
					"                this.pm.sendRequest(request, (error, response) => {",
					"                    if(error || (response.code >= 400 && response.code <= 599)) {",
					"                        let err = error ? error : JSON.stringify(response.json());",
					"                        console.error(\"При выполнении запроса к серверу возникла ошика.\\n\", err,",
					"                             \"\\nДля отладки проблемы повторите такой же запрос к вашей программе \" + ",
					"                             \"на локальном компьютере. Данные запроса:\\n\", JSON.stringify(request));",
					"",
					"                        reject(new Error(errorText + err));",
					"                    }",
					"",
					"                    if(verbose) {",
					"                        console.log(\"Результат обработки запроса: код состояния - \", response.code, \", тело: \", response.json());",
					"                    }",
					"",
					"                    resolve(response.json());",
					"                });",
					"            } catch(err) {",
					"                if(verbose) {",
					"                    console.error(errorText, err);",
					"                }",
					"                return Promise.reject(err);",
					"            }",
					"        });",
					"    }",
					"};",
					"",
					"RandomUtils = class {",
					"    constructor() {}",
					"",
					"    getUser() {",
					"        return {",
					"            name: pm.variables.replaceIn('{{$randomFullName}}'),",
					"            email: pm.variables.replaceIn('{{$randomEmail}}')",
					"        };",
					"    }",
					"",
					"    getCategory() {",
					"        return {",
					"            name: pm.variables.replaceIn('{{$randomWord}}') + Math.floor(Math.random() * 100).toString()",
					"        };",
					"    }",
					"",
					"    getEvent(categoryId) {",
					"        return {",
					"            annotation: pm.variables.replaceIn('{{$randomLoremParagraph}}'),",
					"            category: categoryId,",
					"            description: pm.variables.replaceIn('{{$randomLoremParagraphs}}'),",
					"            eventDate: this.getFutureDateTime(),",
					"            location: {",
					"                lat: parseFloat(pm.variables.replaceIn('{{$randomLatitude}}')),",
					"                lon: parseFloat(pm.variables.replaceIn('{{$randomLongitude}}')),",
					"            },",
					"            paid: pm.variables.replaceIn('{{$randomBoolean}}'),",
					"            participantLimit: pm.variables.replaceIn('{{$randomInt}}'),",
					"            requestModeration: pm.variables.replaceIn('{{$randomBoolean}}'),",
					"            title: pm.variables.replaceIn('{{$randomLoremSentence}}'),",
					"        }",
					"    }",
					"",
					"    getCompilation(...eventIds) {",
					"        return {",
					"            title: pm.variables.replaceIn('{{$randomLoremSentence}}').slice(0, 50),",
					"            pinned: pm.variables.replaceIn('{{$randomBoolean}}'),",
					"            events: eventIds",
					"        };",
					"    }",
					"",
					"    getLocation() {",
					"        return {",
					"            name: pm.variables.replaceIn('{{$randomLoremSentence}}') .slice(0, 50),",
					"            location: {",
					"                lat: parseFloat(pm.variables.replaceIn('{{$randomLatitude}}')),",
					"                lon: parseFloat(pm.variables.replaceIn('{{$randomLongitude}}')),",
					"            },",
					"            radius: Math.random() * 3 + 0.1,",
					"        };",
					"    }",
					"",
					"",
					"    getFutureDateTime(hourShift = 5, minuteShift=0, yearShift=0) {",
					"        let moment = require('moment');",
					"",
					"        let m = moment();",
					"        m.add(hourShift, 'hour');",
					"        m.add(minuteShift, 'minute');",
					"        m.add(yearShift, 'year');",
					"",
					"        return m.format('YYYY-MM-DD HH:mm:ss');",
					"    }",
					"",
					"    getWord(length = 1) {",
					"        let result = '';",
					"        const characters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';",
					"        const charactersLength = characters.length;",
					"        let counter = 0;",
					"        while (counter < length) {",
					"            result += characters.charAt(Math.floor(Math.random() * charactersLength));",
					"            counter += 1;",
					"        }",
					"        return result;",
					"    }",
					"}",
					"",
					"Utils = class {",
					"    constructor() {}",
					"",
					"    findObjectById(array, id) {",
					"        for (i = 0; i<array.length; i++) {",
					"            if (array[i].id == id) {",
					"                return (array[i]);",
					"            }",
					"        }",
					"    }",
					"}"
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "baseUrl",
			"value": "http://localhost:8080",
			"type": "string"
		},
		{
			"key": "response",
			"value": ""
		},
		{
			"key": "eid",
			"value": ""
		},
		{
			"key": "uid",
			"value": ""
		},
		{
			"key": "lid",
			"value": ""
		},
		{
			"key": "response1",
			"value": ""
		},
		{
			"key": "response2",
			"value": ""
		}
	]
}